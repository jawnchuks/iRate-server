// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  NON_BINARY
  OTHER
  PREFER_NOT_TO_SAY
}

enum UserRole {
  USER
  CREATOR
  AFFILIATE
}

enum VerificationStatus {
  PENDING
  IN_PROGRESS
  VERIFIED
  REJECTED
  EXPIRED
}

enum VerificationType {
  PHOTO
  VIDEO
  DOCUMENT
  FACE_RECOGNITION
  PHONE
  EMAIL
}

enum VerificationDocumentType {
  ID_CARD
  PASSPORT
  DRIVERS_LICENSE
  RESIDENCE_PERMIT
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  FILE
  VOICE_NOTE
  CALL
  SYSTEM
}

enum ChatRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum NotificationType {
  RATING
  MESSAGE
  CHAT_REQUEST
  SYSTEM
  VERIFICATION
  PROFILE_UPDATE
}

enum SubscriptionPlanType {
  MONTHLY
  QUARTERLY
  ANNUAL
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PENDING
}

enum SubscriptionTier {
  STANDARD
  PREMIUM
}

model User {
  id                          String               @id @default(uuid())
  email                       String?              @unique
  phoneNumber                 String?              @unique
  password                    String?              // Made optional since we use OTP
  firstName                   String?
  lastName                    String?
  dob                         DateTime?
  gender                      Gender?
  selfDescription             String[]             // array of words
  valuesInOthers              String[]             // array of words
  whoCanSeeRatings            String?              // e.g. 'everyone', 'friends', etc.
  notificationPreferences     Json                 @default("{}")
  preferences                 Json                 @default("{\"language\":\"en\",\"timezone\":\"UTC\",\"notifications\":{\"email\":true,\"push\":true,\"sms\":true}}")
  privacy                     Json                 @default("{\"isProfilePublic\":true,\"areRatingsPublic\":true,\"isLocationPublic\":false,\"isContactPublic\":false}")
  visibility                  Json                 @default("{\"isVisibleInSearch\":true,\"isVisibleToNearby\":true,\"isVisibleToRecommended\":true}")
  settings                    Json                 @default("{\"theme\":\"system\",\"emailNotifications\":true,\"pushNotifications\":true,\"smsNotifications\":true}")
  onboardingComplete          Boolean              @default(false)
  profileCompletionPercentage Int                  @default(0)
  profilePicture              String?
  media                       Media[]
  createdAt                   DateTime             @default(now())
  updatedAt                   DateTime             @updatedAt
  bio                         String?
  interests                   String[]
  languages                   String[]             // <-- Added field for user languages
  lookingFor                  String[]             // <-- Added field for user relationship preferences
  height                      String?              // <-- Added field for user height
  location                    Json?
  averageRating               Float                @default(0)
  totalRatings                Int                  @default(0)
  emailVerified               Boolean              @default(false) @map("email_verified")
  phoneVerified               Boolean              @default(false) @map("phone_verified")
  roles                       UserRole[]           @default([USER])
  givenRatings                Rating[]             @relation("RaterToRating")
  receivedRatings             Rating[]             @relation("TargetToRating")
  messages                    Message[]            @relation("UserMessages")
  notifications               Notification[]
  conversations               Conversation[]       @relation("ConversationParticipants")
  isActive                    Boolean              @default(true)
  deactivatedAt               DateTime?
  deletedAt                   DateTime?
  blockedUsers                BlockedUser[]        @relation("BlockerToBlocked")
  blockedBy                   BlockedUser[]        @relation("BlockedToBlocker")
  reports                     UserReport[]         @relation("ReporterToReported")
  reportedBy                  UserReport[]         @relation("ReportedToReporter")
  verificationStatus          VerificationStatus   @default(PENDING)
  lastVerificationAt        DateTime?
  verificationExpiresAt     DateTime?
  isVerified                Boolean          @default(false)
  trustScore                Int                @default(0)
  riskLevel                 Int                @default(0)
  lastRiskAssessment      DateTime?
  verificationDocuments   VerificationDocument[]
  verificationSessions  VerificationSession[]
  sentChatRequests     ChatRequest[] @relation("SenderToRequest")
  receivedChatRequests ChatRequest[] @relation("ReceiverToRequest")
  subscriptions         Subscription[]
  nationality             String?
  religion              String?
  ethnicity             String?
  zodiacSign            String?
  relationshipStatus    String?
  school                String?
  work                  String?
  biggestWin            String?
  mission               String?
  energyEmoji           String?
  passions             String[]
  vibeCheckAnswers      Json?
  @@index([email])
  @@index([isVerified])
  @@index([isActive])
}

model VerificationOTP {
  id          String   @id @default(uuid())
  phoneNumber String
  otp         String
  expiresAt   DateTime
  createdAt   DateTime @default(now())
}

model Rating {
  id        String   @id @default(uuid())
  score     Int      @db.SmallInt
  rater     User     @relation("RaterToRating", fields: [raterId], references: [id])
  raterId   String
  target    User     @relation("TargetToRating", fields: [targetId], references: [id])
  targetId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([raterId, targetId])
  @@index([targetId])
  @@index([raterId])
}

model Message {
  id             String       @id @default(uuid())
  conversationId String
  senderId       String
  content        String?
  type           MessageType  @default(TEXT)
  mediaUrl       String?
  viewOnce       Boolean      @default(false)
  expiresAt      DateTime?
  isRead         Boolean      @default(false)
  isDeleted      Boolean      @default(false)
  deletedAt      DateTime?
  isEdited       Boolean      @default(false)
  editedAt       DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  attachments    Attachment[] @relation("MessageAttachments")
  reactions      Reaction[]   @relation("MessageReactions")
  events         MessageEvent[] @relation("MessageEvents")
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  sender         User         @relation("UserMessages", fields: [senderId], references: [id])
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json?
  read      Boolean         @default(false)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}

model Conversation {
  id           String   @id @default(uuid())
  isGroup      Boolean  @default(false)
  groupName    String?
  participants User[]   @relation("ConversationParticipants")
  messages     Message[]
  calls        Call[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Media {
  id        String   @id @default(cuid())
  type      String // IMAGE, VIDEO, AUDIO
  url       String
  caption   String?
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Attachment {
  id             String   @id @default(uuid())
  url            String
  type           String   // image, video, audio, file, etc.
  name           String
  size           Int
  messageId      String?
  message        Message? @relation("MessageAttachments", fields: [messageId], references: [id])
  createdAt      DateTime @default(now())
}

model Reaction {
  id        String   @id @default(uuid())
  emoji     String
  userId    String
  messageId String
  message   Message  @relation("MessageReactions", fields: [messageId], references: [id])
  createdAt DateTime @default(now())
}

model MessageEvent {
  id        String   @id @default(uuid())
  messageId String
  userId    String
  type      String   // VIEWED, SCREENSHOT, DELETED, etc.
  message   Message  @relation("MessageEvents", fields: [messageId], references: [id])
  createdAt DateTime @default(now())
}

model Call {
  id             String       @id @default(uuid())
  conversationId String
  initiatorId    String
  receiverId     String
  type           String       // AUDIO, VIDEO
  status         String       // INITIATED, ACCEPTED, ENDED, MISSED
  startedAt      DateTime
  endedAt        DateTime?
  metadata       Json?
  conversation   Conversation @relation(fields: [conversationId], references: [id])
}

model BlockedUser {
  id         String   @id @default(uuid())
  blockerId  String
  blockedId  String
  reason     String?
  createdAt  DateTime @default(now())
  blocker    User     @relation("BlockerToBlocked", fields: [blockerId], references: [id])
  blocked    User     @relation("BlockedToBlocker", fields: [blockedId], references: [id])

  @@unique([blockerId, blockedId])
  @@index([blockerId])
  @@index([blockedId])
}

model UserReport {
  id           String   @id @default(uuid())
  reporterId   String
  reportedId   String
  reason       String
  details      String?
  reportType   String
  createdAt    DateTime @default(now())
  reporter     User     @relation("ReporterToReported", fields: [reporterId], references: [id])
  reported     User     @relation("ReportedToReporter", fields: [reportedId], references: [id])

  @@index([reporterId])
  @@index([reportedId])
}

model VerificationDocument {
  id                String                  @id @default(uuid())
  userId            String
  type              VerificationDocumentType
  documentNumber    String?
  countryOfIssue    String?
  expiryDate        DateTime?
  verificationStatus VerificationStatus     @default(PENDING)
  documentUrl       String
  selfieUrl         String?
  metadata          Json?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  verifiedAt        DateTime?
  rejectedAt        DateTime?
  rejectionReason   String?
  user              User                   @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([verificationStatus])
}

model VerificationSession {
  id                String            @id @default(uuid())
  userId            String
  type              VerificationType
  status            VerificationStatus @default(PENDING)
  sessionToken      String            @unique
  expiresAt         DateTime
  metadata          Json?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  completedAt       DateTime?
  user              User              @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([sessionToken])
  @@index([status])
}

model ChatRequest {
  id        String           @id @default(uuid())
  senderId  String
  receiverId String
  status    ChatRequestStatus @default(PENDING)
  sender    User             @relation("SenderToRequest", fields: [senderId], references: [id])
  receiver  User             @relation("ReceiverToRequest", fields: [receiverId], references: [id])
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@index([senderId])
  @@index([receiverId])
  @@index([status])
}

model SubscriptionPlan {
  id              String    @id @default(uuid())
  name            String
  description     String
  price           Float
  type            SubscriptionPlanType
  messagesPerMonth Int
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  subscriptions   Subscription[]
}

model Subscription {
  id          String    @id @default(uuid())
  userId      String
  planId      String
  status      SubscriptionStatus
  startDate   DateTime
  endDate     DateTime
  messagesUsed Int      @default(0)
  autoRenew   Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  plan        SubscriptionPlan @relation(fields: [planId], references: [id])
  payments    Payment[]
  user        User      @relation(fields: [userId], references: [id])
  tier        SubscriptionTier
  benefits    String[]
}

model Payment {
  id              String    @id @default(uuid())
  subscriptionId  String
  amount          Float
  currency        String    @default("USD")
  status          String
  paymentMethod   String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  subscription    Subscription @relation(fields: [subscriptionId], references: [id])
}

// Add any additional models as needed based on your application requirements.
